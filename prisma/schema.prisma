generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}



model User {
  id            String    @id @default(uuid()) @db.UniqueIdentifier
  phoneNumber   String    @unique @db.VarChar(15)
  email         String?   @unique @db.VarChar(100)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now()) @db.DateTime2
  updatedAt     DateTime  @updatedAt @db.DateTime2

  roles         UserRole[]
  customer      Customer?
  enabler       Enabler?
  owner         Owner?

  deviceTokens  DeviceToken[]
  authSessions  AuthSession[]
}

model Role {
  id            String   @id @default(uuid()) @db.UniqueIdentifier
  name          String   @unique @db.VarChar(50)
  
  users         UserRole[]
}

model UserRole {
  userId        String   @db.UniqueIdentifier
  roleId        String   @db.UniqueIdentifier
  user          User     @relation(fields: [userId], references: [id])
  role          Role     @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Customer {
  id            String    @id @default(uuid()) @db.UniqueIdentifier
  userId        String    @unique @db.UniqueIdentifier
  fullName      String    @db.NVarChar(50)
  address       String?   @db.NVarChar(200)
  profileImage  String?   @db.VarChar(500)
  createdAt     DateTime  @default(now()) @db.DateTime2
  updatedAt     DateTime  @updatedAt @db.DateTime2

  // Relations
  user          User      @relation(fields: [userId], references: [id])
}

model Enabler {
  id            String    @id @default(uuid()) @db.UniqueIdentifier
  userId        String    @unique @db.UniqueIdentifier
  fullName      String    @db.NVarChar(50)
  experience    String    @db.NVarChar(50)
  description   String?   @db.NVarChar(500)
  profileImage  String?   @db.VarChar(500)
  hourRate      Float     @default(0) @db.Float
  createdAt     DateTime  @default(now()) @db.DateTime2
  updatedAt     DateTime  @updatedAt @db.DateTime2

  // Relations
  user          User      @relation(fields: [userId], references: [id])
}

model Owner {
  id            String    @id @default(uuid()) @db.UniqueIdentifier
  userId        String    @unique @db.UniqueIdentifier
  firstName     String    @db.NVarChar(50)
  lastName      String    @db.NVarChar(50)
  companyName   String?   @db.NVarChar(100)
  businessType  String?   @db.VarChar(50)
  taxId         String?   @db.VarChar(50)
  profileImage  String?   @db.VarChar(500)
  createdAt     DateTime  @default(now()) @db.DateTime2
  updatedAt     DateTime  @updatedAt @db.DateTime2

  // Relations
  user          User      @relation(fields: [userId], references: [id])
}

model DeviceToken {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  userId    String   @db.UniqueIdentifier
  token     String   @db.VarChar(500)
  device    String   @db.VarChar(100)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @updatedAt @db.DateTime2

  user      User     @relation(fields: [userId], references: [id])
}

model AuthSession {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  userId    String   @db.UniqueIdentifier
  token     String   @unique @db.VarChar(500)
  device    String?  @db.VarChar(100)
  ipAddress String?  @db.VarChar(50)
  expiresAt DateTime @db.DateTime2
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @updatedAt @db.DateTime2

  user      User     @relation(fields: [userId], references: [id])
}